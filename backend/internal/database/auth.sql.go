// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: auth.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getUserAuthByEmail = `-- name: GetUserAuthByEmail :one
SELECT id, created_at, updated_at, email, password, user_id FROM auth WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserAuthByEmail(ctx context.Context, email string) (Auth, error) {
	row := q.db.QueryRowContext(ctx, getUserAuthByEmail, email)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Password,
		&i.UserID,
	)
	return i, err
}

const signUp = `-- name: SignUp :one
INSERT INTO auth (email, password, user_id) VALUES ($1, $2, $3) RETURNING id, created_at, updated_at, email, password, user_id
`

type SignUpParams struct {
	Email    string
	Password string
	UserID   uuid.UUID
}

func (q *Queries) SignUp(ctx context.Context, arg SignUpParams) (Auth, error) {
	row := q.db.QueryRowContext(ctx, signUp, arg.Email, arg.Password, arg.UserID)
	var i Auth
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Password,
		&i.UserID,
	)
	return i, err
}
